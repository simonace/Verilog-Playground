PORT_NUM = 4

moduleName = "ArbiterComb_x" + str(PORT_NUM)
f = open(moduleName + ".v", "w+")

f.write("//" + '-'*75 + '\n')
f.write("// This arbiter can be used to replace the arbiter in the multi-layer\n")
f.write("// AHB Bus Matrix offered by ARM System Design Kit. This arbiter appears\n")
f.write("// with the same interface/portlist aiming to easy replacement/integration.\n")
f.write("// However, an arbitration strategy of combinatorial logic is implemented\n")
f.write("// with the advantage of saving one cycle. Namely the arbitration results\n")
f.write("// addr_in_port and no_port are available \"instantly\" within the same\n")
f.write("// cycle the requests comes, rather than a cycle delay in the ARM original\n")
f.write("// one. The downside is longer combinatorial path to balance, along with a\n")
f.write("// bit overheads.\n")
f.write("//\n")
f.write("// This file is generated by a Python script giving a parameter of the number\n")
f.write("// of input ports. The script is authored by Cheng Cai.\n")
f.write("//" + '-'*75 + '\n')

f.write('\n')
f.write("`timescale 1ns/1ps\n")
f.write('\n')

f.write("module " + moduleName + "(\n")
f.write('\n')
f.write(' '*4 + "input".ljust(8) + "wire".ljust(8) + ''.ljust(8) + "HCLK".ljust(12) + ",\n")
f.write(' '*4 + "input".ljust(8) + "wire".ljust(8) + ''.ljust(8) + "HRESETn".ljust(12) + ",\n")
f.write('\n')
for i in range(PORT_NUM):
    f.write(' '*4 + "input".ljust(8) + "wire".ljust(8) + ''.ljust(8) + ("req_port" + str(i)).ljust(12) + ",\n")
f.write('\n')
f.write(' '*4 + "input".ljust(8) + "wire".ljust(8) + ''.ljust(8) + "HREADYM".ljust(12) + ",\n")
f.write(' '*4 + "input".ljust(8) + "wire".ljust(8) + ''.ljust(8) + "HSELM".ljust(12) + ",\n")
f.write(' '*4 + "input".ljust(8) + "wire".ljust(8) + "[1:0]".ljust(8) + "HTRANSM".ljust(12) + ",\n")
f.write(' '*4 + "input".ljust(8) + "wire".ljust(8) + ''.ljust(8) + "HMASTLOCKM".ljust(12) + ",\n")
f.write('\n')
addrInPortWidth = (PORT_NUM-1).bit_length()
f.write(' '*4 + "output".ljust(8) + "reg".ljust(8) + ("[" + str(addrInPortWidth-1) + ":0]").ljust(8) + "addr_in_port".ljust(12) + ",\n")
f.write(' '*4 + "output".ljust(8) + "wire".ljust(8) + ''.ljust(8) + "no_port".ljust(12) + "\n")
f.write('\n')
f.write(");\n\n")

f.write("wire".ljust(8) + "no_pend".ljust(12) + ";\n")
for i in range(PORT_NUM):
    f.write("reg".ljust(8) + ("pend_port" + str(i)).ljust(12) + ";\n")
for i in range(PORT_NUM):
    f.write("reg".ljust(8) + ("req_grant" + str(i)).ljust(12) + ";\n")
f.write('\n'*2)

reqOrString = ""
pendOrString = ""
for i in range(PORT_NUM):
    reqOrString = reqOrString + "req_port" + str(i) + " | "
    pendOrString = pendOrString + " | pend_port" + str(i)
f.write("assign no_port = ~(" + reqOrString + pendOrString[3:] + ") | ~HREADYM;\n")
f.write("assign no_pend = ~(" + pendOrString[3:] + ");\n")
f.write('\n')

f.write("always @(*) begin\n")
f.write(' '*4 + "if (HSELM & (HTRANSM != 2'b00)) begin\n")
for i in range(PORT_NUM):
    f.write(' '*8 + ("else " if i>0 else "") + "if (pend_port" + str(i) + ") begin\n")
    f.write(' '*12 + "addr_in_port = " + str(addrInPortWidth) + "'d" + str(i) + ";\n")
    for j in range(PORT_NUM):
        f.write(' '*12 + "req_grant" + str(j) + " = 1'b0;\n")
    f.write(' '*8 + "end\n")
for i in range(PORT_NUM):
    f.write(' '*8 + "else if (req_port" + str(i) + ") begin\n")
    f.write(' '*12 + "addr_in_port = " + str(addrInPortWidth) + "'d" + str(i) + ";\n")
    for j in range(PORT_NUM):
        f.write(' '*12 + "req_grant" + str(j) + " = 1'b" + ("1" if j==i else "0") +  ";\n")
    f.write(' '*8 + "end\n")
f.write(' '*8 + "else begin\n")
f.write(' '*12 + "addr_in_port = " + str(addrInPortWidth) + "'d0;\n")
for j in range(PORT_NUM):
    f.write(' '*12 + "req_grant" + str(j) + " = 1'b0;\n")
f.write(' '*8 + "end\n")
f.write(' '*8 + "end\n")
f.write(' '*4 + "end\n")
f.write(' '*4 + "else begin\n")
f.write(' '*8 + "addr_in_port = " + str(addrInPortWidth) + "'d0;\n")
for j in range(PORT_NUM):
    f.write(' '*8 + "req_grant" + str(j) + " = 1'b0;\n")
f.write(' '*8 + "end\n")
f.write(' '*4 + "end\n")
f.write("end\n\n")

f.write("always @(negedge HRESETn or posedge HCLK) begin\n")
f.write(' '*4 + "if (~HRESETn) begin\n")
for i in range(PORT_NUM):
    f.write(' '*8 + "pend_port" + str(i) + " <= 1'b0;\n")
f.write(' '*4 + "end\n")
f.write(' '*4 + "else begin\n")
f.write(' '*8 + "if (~HMASTLOCK & HREADYM) begin\n")
f.write(' '*12 + "if (no_pend) begin\n")
for i in range(PORT_NUM):
    f.write(' '*16 + "pend_port" + str(i) + " <= ~req_grant" + str(i) + " & req_port" + str(i) + ";\n")
f.write(' '*12 + "end\n")
for i in range(PORT_NUM):
    f.write(' '*12 + "else if (pend_port" + str(i) + ") begin\n")
    for j in range(PORT_NUM):
        f.write(' '*16 + "pend_port" + str(j) + " <= " + ("1'b0" if j<=i else ("pend_port" + str(j))) + ";\n")
    f.write(' '*12 + "end\n")
f.write(' '*8 + "end\n")
f.write(' '*4 + "end\n")
f.write("end\n\n")

f.write("endmodule")
f.close()
